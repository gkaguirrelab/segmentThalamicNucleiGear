#!/usr/bin/python3

import os, json, imageio
import matplotlib.pyplot as plt
import nibabel as nib

##################### Define the Paths and parameters ########################
# Print the CPU info
os.system('cat /proc/cpuinfo')

# Install bc and csh
os.system('apt-get install bc csh dc')

# Set paths and create some folders
flywheel_base ='/flywheel/v0/'
first_output_dir = '/firstOutput'
workdir = '/workdir'
final_output_dir = os.path.join(flywheel_base, 'output')
manifest_file = os.path.join(flywheel_base, 'manifest.json')
config_path = os.path.join(flywheel_base, 'config.json')
os.system('mkdir %s' % first_output_dir)
os.system('mkdir %s' % workdir)
freesurfer_environment_path = 'export FREESURFER_HOME=/freesurfer;export SUBJECTS_DIR=/freesurfer/subjects/; export PATH="$FREESURFER_HOME/bin:$PATH"; export PATH="$SUBJECTS_DIR:$PATH"'
fsl_path = 'FSLDIR=/fsl/; . ${FSLDIR}/etc/fslconf/fsl.sh; PATH=${FSLDIR}:${PATH};export FSLDIR PATH;/fsl/bin/'

####################### Define some functions for plotting ####################

def make_plot(subject_id, base_image, overlay, title, filename, x, y, z, apect_ratio_vector, output_folder):
    
    # This function simply gets two MRI images as inputs and overlays them 
    # using different colors for each image. Used as a diagnostic image.
        
    fig, (ax1, ax2, ax3) = plt.subplots(1,3)
    fig.suptitle(title, fontsize=20)

    epi_img = nib.load(base_image)
    epi_img_data = epi_img.get_fdata()
    ax1.imshow(epi_img_data[x,:,:], cmap="gray", aspect = apect_ratio_vector[0])
    ax2.imshow(epi_img_data[:,y,:], cmap="gray", aspect = apect_ratio_vector[1])
    ax3.imshow(epi_img_data[:,:,z], cmap="gray", aspect = apect_ratio_vector[2])
    ax1.axis('off')
    ax2.axis('off')
    ax3.axis('off')  
    
    if overlay != 'NA':
        epi_img = nib.load(overlay)
        epi_img_data = epi_img.get_fdata()
        ax1.imshow(epi_img_data[x,:,:], cmap="hot", alpha=0.4, aspect = apect_ratio_vector[3])
        ax2.imshow(epi_img_data[:,y,:], cmap="hot", alpha=0.4, aspect = apect_ratio_vector[4])
        ax3.imshow(epi_img_data[:,:,z], cmap="hot", alpha=0.4, aspect = apect_ratio_vector[5])
        ax1.axis('off')
        ax2.axis('off')
        ax3.axis('off')

    plt.savefig(os.path.join(output_folder, subject_id + '_' + filename)) 


def make_gif(image_folder, gif_name, output_folder):
    
    # Make a gif out of multiple images
    images = []
    for filename in os.listdir(image_folder):
        images.append(imageio.imread(os.path.join(image_folder, filename)))
        imageio.mimsave('/%s/%s.gif' % (output_folder, gif_name), images, duration=0.7)
###################Parse Config Here############################

with open(config_path) as config_file:
    job_config = json.load(config_file)
config = job_config['config']

verbose = config['verbose']
subject_id = config['subject_id']
reorient_to_std = config['reorient_to_std']
dof = config['dof']
registration_tool = config['registration_tool']
####################### Process Inputs ######################################## 

# Unzip the thalamic segmentation archive
thalamicSegmentationArchivePath = os.path.join(flywheel_base, 'input/thalamicSegmentationArchive')
thalamicSegmentationArchive = os.path.join(thalamicSegmentationArchivePath, os.listdir(thalamicSegmentationArchivePath)[0])
unzipped_folder_path = '/opt/unzipped_folder_thalamic'
os.system('mkdir %s' % unzipped_folder_path)
if verbose == '0':
    os.system('unzip -q %s -d %s' % (thalamicSegmentationArchive, unzipped_folder_path))
else:
    os.system('unzip %s -d %s' % (thalamicSegmentationArchive, unzipped_folder_path))
nu_image = os.path.join(unzipped_folder_path, 'nu.mgz')
segment = os.path.join(unzipped_folder_path, 'ThalamicNuclei.v12.T1.mgz')
segment_lowres = os.path.join(unzipped_folder_path, 'ThalamicNuclei.v12.T1.FSvoxelSpace.mgz')
aparc_aseg = os.path.join(unzipped_folder_path, 'aparc+aseg.mgz')

# Create image temp
file_temp = '/filetemp'
os.system('mkdir %s' % file_temp)

# Convert the segmentations to nifti
nu_image_nifti = os.path.join(file_temp, 'nu.nii.gz')
segment_nifti = os.path.join(file_temp, 'for_viewing_higres_ThalamicNuclei.v12.T1.nii.gz')
segment_lowres_nifti = os.path.join(file_temp, 'ThalamicNuclei.v12.T1.FSvoxelSpace.nii.gz')
aparc_aseg_nifti = os.path.join(file_temp, 'aparc+aseg.nii.gz')
os.system('%s; /freesurfer/bin/mri_convert %s %s' % (freesurfer_environment_path, nu_image, nu_image_nifti))
os.system('%s; /freesurfer/bin/mri_convert %s %s' % (freesurfer_environment_path, segment, segment_nifti))
os.system('%s; /freesurfer/bin/mri_convert %s %s' % (freesurfer_environment_path, segment_lowres, segment_lowres_nifti))
os.system('%s; /freesurfer/bin/mri_convert %s %s' % (freesurfer_environment_path, aparc_aseg, aparc_aseg_nifti))

if reorient_to_std == '1':
    os.system('%sfslreorient2std %s' % (fsl_path, nu_image_nifti))
    os.system('%sfslreorient2std %s' % (fsl_path, segment_nifti))
    os.system('%sfslreorient2std %s' % (fsl_path, segment_lowres_nifti))
    os.system('%sfslreorient2std %s' % (fsl_path, aparc_aseg_nifti))
    
# Set path to the target image
target_image_path = os.path.join(flywheel_base, 'input/targetImage')
target_image = os.path.join(target_image_path, os.listdir(target_image_path)[0])

# Get the first Tr of the FOD image for plotting
single_tr = os.path.join(workdir, 'singlefod.nii.gz')
os.system('%sfslroi %s %s 0 1' % (fsl_path, target_image, single_tr))

# Get the freesurfer subject in the folder
fs_subject_folder = os.path.join(flywheel_base, 'input/reconAllGearOutput')
if os.path.exists(fs_subject_folder):
    zip_file = os.path.join(fs_subject_folder, os.listdir(fs_subject_folder)[0])
    unzipped_folder_path = '/opt/unzipped_folder'
    os.system('mkdir %s' % unzipped_folder_path)
    os.system('unzip -q %s -d %s' % (zip_file, unzipped_folder_path))
    subject_name = os.listdir(unzipped_folder_path)[0]
    initial_subject_folder = os.path.join(unzipped_folder_path, subject_name)
    os.system('cp -r %s /freesurfer/subjects/' % initial_subject_folder)
    
    # Get the freesurfer license and move it to the freesurfer environment
    freesurferLicensePath = os.path.join(flywheel_base, 'input/freesurferLicense')
    freesurferLicense = os.path.join(freesurferLicensePath, os.listdir(freesurferLicensePath)[0])
    os.system('cp %s /freesurfer/license.txt' % freesurferLicense)
###################Run Algorithm################################
# Run registration
generic_affine = os.path.join(workdir, 'registered0GenericAffine.mat')
warped = os.path.join(workdir, 'nuRegistered.nii.gz')

# Flirt method 
if registration_tool == 'flirt':
    if verbose == '0':
        reg_command = ('%sflirt -in %s -ref %s -out %s -omat %s '
                        '-searchrx -180 180 -searchry -180 180 -searchrz -180 180 -dof %s' % (fsl_path, nu_image_nifti, single_tr, warped, generic_affine, dof))
    if verbose == '1':
        reg_command = ('%sflirt -in %s -ref %s -out %s -omat %s '
                        '-searchrx -180 180 -searchry -180 180 -searchrz -180 180 -dof %s -v' % (fsl_path, nu_image_nifti, single_tr, warped, generic_affine, dof))
    os.system(reg_command)
# bbregister method
elif registration_tool == 'bbregister':
    single_tr_to_targ_reg = os.path.join(workdir, 'single_tr_to_targ.reg')  
    single_tr_to_targ_mat = os.path.join(workdir, 'single_tr_to_targ.mat')
    reg_command = '%s; %s; csh /freesurfer/bin/bbregister --mov %s --s %s --reg %s --fslmat %s --t1 --%s' % (fsl_path, freesurfer_environment_path, single_tr,
                                                                                                             subject_name, single_tr_to_targ_reg,
                                                                                                             single_tr_to_targ_mat, dof)
    os.system(reg_command)
    os.system('%sconvert_xfm -omat %s -inverse %s' % (fsl_path, generic_affine, single_tr_to_targ_mat))
    os.system('%sflirt -in %s -ref %s -dof %s -applyxfm -init %s -interp nearestneighbour -out %s' % (fsl_path, nu_image_nifti, single_tr, dof, generic_affine, warped))
else:
    raise RuntimeError('Registration method is not recognnized')

os.system('cp %s %s; cp %s %s; cp %s %s' % (generic_affine, final_output_dir, single_tr, final_output_dir, nu_image_nifti, final_output_dir))
# Apply transformations to the segmentations
higres_moved_segmentation = os.path.join(first_output_dir, 'registered_ThalamicNuclei.v12.T1.nii.gz')
lowres_moved_segmentation = os.path.join(first_output_dir, 'registered_ThalamicNuclei.v12.T1.FSvoxelSpace.nii.gz')
aparc_aseg_segmentation = os.path.join(first_output_dir, 'registered_aparc+aseg.nii.gz')

if verbose == '0':
    os.system('%sflirt -in %s -ref %s -dof %s -applyxfm -init %s -interp nearestneighbour -out %s' % (fsl_path, segment_nifti, single_tr, dof, generic_affine, higres_moved_segmentation))
    os.system('%sflirt -in %s -ref %s -dof %s -applyxfm -init %s -interp nearestneighbour -out %s' % (fsl_path, segment_lowres_nifti, single_tr, dof, generic_affine, lowres_moved_segmentation))
    os.system('%sflirt -in %s -ref %s -dof %s -applyxfm -init %s -interp nearestneighbour -out %s' % (fsl_path, aparc_aseg_nifti, single_tr, dof, generic_affine, aparc_aseg_segmentation))
if verbose == '1':   
    os.system('%sflirt -in %s -ref %s -dof %s -applyxfm -init %s -interp nearestneighbour -out %s -v' % (fsl_path, segment_nifti, single_tr, dof, generic_affine, higres_moved_segmentation))
    os.system('%sflirt -in %s -ref %s -dof %s -applyxfm -init %s -interp nearestneighbour -out %s -v' % (fsl_path, segment_lowres_nifti, single_tr, dof, generic_affine, lowres_moved_segmentation))
    os.system('%sflirt -in %s -ref %s -dof %s -applyxfm -init %s -interp nearestneighbour -out %s -v' % (fsl_path, aparc_aseg_nifti, single_tr, dof, generic_affine, aparc_aseg_segmentation))

os.system('cp %s %s' % (target_image, first_output_dir))

# Make registration gif plots
loaded_image = nib.load(single_tr)
dims = loaded_image.shape
temp_for_images = '/tempim'
os.system('mkdir %s' % temp_for_images)
make_plot(subject_id, single_tr, 'NA', 'registration T1toFOD', 'first.png', round(dims[0]/2), round(dims[1]/2), round(dims[2]/2), [1,1,1,1,1,1], temp_for_images)
make_plot(subject_id, warped, 'NA', 'registration T1toFOD', 'second.png', round(dims[0]/2), round(dims[1]/2), round(dims[2]/2), [1,1,1,1,1,1], temp_for_images)
make_gif(temp_for_images, 'T1toFOD', final_output_dir)

# Make an overlay image
make_plot(subject_id, single_tr, lowres_moved_segmentation, 'Segmentation overlaid with target', 'segmentationOutlineDiagnostics.png', round(dims[0]/2), round(dims[1]/2), round(dims[2]/2), [1,1,1,1,1,1], final_output_dir)

# Zip everything and output
os.system('cd %s; zip -q %s/%s_warped_segmentations.zip *' % (first_output_dir, final_output_dir, subject_id))
