#!/usr/bin/python3

import os, json, imageio
import matplotlib.pyplot as plt
import nibabel as nib

###################### Define the Paths and parameters ########################

# Print the CPU info
os.system('cat /proc/cpuinfo')

# Set paths and create some folders
flywheel_base ='/flywheel/v0/'
first_output_dir = '/firstOutput'
workdir = '/workdir'
final_output_dir = os.path.join(flywheel_base, 'output')
manifest_file = os.path.join(flywheel_base, 'manifest.json')
config_path = os.path.join(flywheel_base, 'config.json')
os.system('mkdir %s'%first_output_dir)
os.system('mkdir %s'%workdir)

####################### Define some functions for plotting ####################

def make_plot(subject_id, base_image, overlay, title, filename, x, y, z, apect_ratio_vector, output_folder):
    
    # This function simply gets two MRI images as inputs and overlays them 
    # using different colors for each image. Used as a diagnostic image.
        
    fig, (ax1, ax2, ax3) = plt.subplots(1,3)
    fig.suptitle(title, fontsize=20)

    epi_img = nib.load(base_image)
    epi_img_data = epi_img.get_fdata()
    ax1.imshow(epi_img_data[x,:,:], cmap="gray", aspect = apect_ratio_vector[0])
    ax2.imshow(epi_img_data[:,y,:], cmap="gray", aspect = apect_ratio_vector[1])
    ax3.imshow(epi_img_data[:,:,z], cmap="gray", aspect = apect_ratio_vector[2])
    ax1.axis('off')
    ax2.axis('off')
    ax3.axis('off')  
    
    if overlay != 'NA':
        epi_img = nib.load(overlay)
        epi_img_data = epi_img.get_fdata()
        ax1.imshow(epi_img_data[x,:,:], cmap="hot", alpha=0.4, aspect = apect_ratio_vector[3])
        ax2.imshow(epi_img_data[:,y,:], cmap="hot", alpha=0.4, aspect = apect_ratio_vector[4])
        ax3.imshow(epi_img_data[:,:,z], cmap="hot", alpha=0.4, aspect = apect_ratio_vector[5])
        ax1.axis('off')
        ax2.axis('off')
        ax3.axis('off')

    plt.savefig(os.path.join(output_folder, subject_id + '_' + filename)) 
    
def make_gif(image_folder, gif_name, output_folder):
    
    # Make a gif out of multiple images
    images = []
    for filename in os.listdir(image_folder):
        images.append(imageio.imread(os.path.join(image_folder, filename)))
        imageio.mimsave('/%s/%s.gif' % (output_folder, gif_name), images, duration=0.7)

####################### Process Inputs ######################################## 

# Unzip the thalamic segmentation archive
thalamicSegmentationArchivePath = os.path.join(flywheel_base, 'input/thalamicSegmentationArchive')
thalamicSegmentationArchive = os.path.join(thalamicSegmentationArchivePath, os.listdir(thalamicSegmentationArchivePath)[0])
unzipped_folder_path = '/opt/unzipped_folder_thalamic'
os.system('mkdir %s' % unzipped_folder_path)
os.system('unzip -q %s -d %s' % (thalamicSegmentationArchive, unzipped_folder_path))
nu_image = os.path.join(unzipped_folder_path, os.listdir(unzipped_folder_path)[0], 'nu.mgz')

# Unzip the qsiprep archive 
qsiprepArchivePath = os.path.join(flywheel_base, 'input/qsiprepArchive')
qsiprepArchive = os.path.join(qsiprepArchivePath, os.listdir(qsiprepArchivePath)[0])
unzipped_folder_path_two = '/opt/unzipped_folder_qsiprep'
os.system('mkdir %s' % unzipped_folder_path_two)
os.system('unzip -q %s -d %s' % (qsiprepArchive, unzipped_folder_path_two))
main_qsiprep_archive = os.path.join(unzipped_folder_path, os.listdir(unzipped_folder_path_two)[0])
qsiprep_dir =  os.path.join(main_qsiprep_archive, os.listdir(main_qsiprep_archive)[0], 'qsiprep')
for i in os.listdir(qsiprep_dir):
    if os.path.isdir(i) & 'sub' in i:
        processed_anatomical = os.path.join(qsiprep_dir, i, 'anat', '%s_desc-preproc_T1w.nii.gz' % i)
        subject_id = i[4:]

###################Parse Config Here############################

with open(config_path) as config_file:
    job_config = json.load(config_file)
config = job_config['config']

verbose = config['verbose']

###################Run Algorithm################################
# Run ants registration 
reg_command = '''antsRegistration --verbose %s --dimensionality 3
                 --float 0 --collapse-output-transforms 1 
                 --output [ registered,/workdir/registeredWarped.nii.gz,/workdir/registeredInverseWarped.nii.gz ]
                 --interpolation Linear --use-histogram-matching 0 --winsorize-image-intensities [ 0.005,0.995 ] 
                 --initial-moving-transform [ %s,%s,1 ] --transform Rigid[ 0.1 ] 
                 --metric MI[ %s,%s,1,32,Regular,0.25 ] 
                 --convergence [ 1000x500x250x100,1e-6,10 ] --shrink-factors 8x4x2x1 
                 --smoothing-sigmas 3x2x1x0vox''' % (verbose, processed_anatomical, nu_image,
                                                     processed_anatomical, nu_image)

os.system(reg_command)    
generic_affine = '/workdir/registered0GenericAffine.mat'
warped = '/workdir/registeredWarped.nii'

for file in os.path.join(unzipped_folder_path, os.listdir(unzipped_folder_path)[0]):
    path_to_file = os.path.join(os.path.join(unzipped_folder_path, os.listdir(unzipped_folder_path)[0]), file)
    if os.path.splitext(file)[1] == '.mgz':   
        command = 'antsApplyTransforms -d 3 -i %s -r %s -o %s -t %s -v %s' % (path_to_file, processed_anatomical,
                                                                              path_to_file, generic_affine, verbose)
        os.system(command)
    
    os.system('cp %s %s/' % (path_to_file, final_output_dir))

# Make plots 
temp_for_images = '/tempim'
os.system('mkdir %s' % temp_for_images)
make_plot(subject_id, processed_anatomical, 'NA', 'Warp results', 'im1.png', 131, 105, 45, [0.6, 0.6, 1.4, 0.6, 0.6, 1.4], temp_for_images)
make_plot(subject_id, warped, 'NA', 'Warp results', 'im2.png', 131, 105, 45, [0.6, 0.6, 1.4, 0.6, 0.6, 1.4], temp_for_images)
make_gif(temp_for_images, subject_id + '_' + 'orig2Acpc', final_output_dir)